# Transonic_Icing.py
#
# Created:  Jul 2017, Tigar Cyr
# Modified: Jul 2017, Tigar Cyr

# ----------------------------------------------------------------------
#   Imports
# ----------------------------------------------------------------------
import SUAVE.Analyses.Aerodynamics.Aerodynamics as Aerodynamics
import SUAVE.Analyses.Aerodynamics.Results as Results
import SUAVE.Core.Units as Units
from SUAVE.Methods.Aerodynamics import Transonic as Transonic
from SUAVE.Methods.Aerodynamics import Transonic_Icing as Icing
import Icing_Adjust
import numpy as np
import warnings


# ----------------------------------------------------------------------
#   Transonic
# ----------------------------------------------------------------------
class Transonic_Icing(Aerodynamics):
    """ SUAVE.Analyses.Aerodynamics.Transonic_Icing()
        Model based on NASA CRM Transonic Experimental Data (curve fits)
    """
    def __init__(self, cl_dist = None, cd_dist = None):
        if cl_dist == None:
            self.cl_dist = np.random.normal
        else:
            self.cl_dist = cl_dist

        if cd_dist == None:
            self.cd_dist = np.random.normal
        else:
            self.cd_dist = cd_dist

        self.reset()

    def adjust_cl(self, cl):
        return cl - self.cl_adjust

    def adjust_cd(self, cd):
        return cd - self.cd_adjust

    def reset(self):
        self.cl_adjust = self.cl_dist()
        self.cd_adjust = self.cd_dist()


    def evaluate(self, state):
        """ SUAVE.Analyses.Transonic_Icing.evaluate(state)
            evaluate aerodynamic analysis

            Inputs:
                state.conditions.freestream.mach_number - mach number
                state.conditions.aerodynamics.angle_of_attack - aoa [radians]

            Outputs:
                results.lift.total - lift coefficient
                results.drag.total - drag coefficient
        """

        # Initialize results object
        results = Results()
        results.drag = Results()
        results.lift = Results()

        # Unpack input
        mach = state.conditions.freestream.mach_number
        alpha = state.conditions.aerodynamics.angle_of_attack / Units.deg

        alphamax = 8
        alphamin = -3

        alpha[alpha > alphamax] = alphamax
        alpha[alpha < alphamin] = alphamin

        mean = np.mean(mach)
        # Check to see if model is transonic
        if mean < .8:
            warnings.warn("System is subsonic. Consider using different model")
        elif mean > 1.2:
            warnings.warn("System is supersonic. Consider using different model")

        cl = Transonic.compute_lift(alpha)
        cd = Transonic.compute_drag_from_lift(cl)

        cl = self.adjust_cl(cl)
        cd = self.adjust_cd(cd)


        results.lift.total = cl
        results.drag.total = cd



        return results


# ----------------------------------------------------------------------
#   Module Testing
# ----------------------------------------------------------------------
def main():
    import SUAVE.Analyses.Mission.Segments.Conditions.State as State
    import SUAVE.Analyses.Mission.Segments.Conditions.Aerodynamics as Aerodynamics

    state = State()
    state.conditions.update(Aerodynamics())

    state.conditions.freestream.mach_number = np.array([[.8503], [.85], [.85]])
    state.conditions.aerodynamics.angle_of_attack = np.array([[0], [1], [2]])
    state.conditions.aerodynamics.side_slip_angle = np.array([[0], [0], [0]])
    state.conditions.aerodynamics.roll_angle = np.array([[180.0], [180], [180]])

    transonic = Transonic()
    result = transonic.evaluate(state)
    print result.drag.total
    print result.lift.total
    print transonic.settings.maximum_lift_coefficient


#    model = Fidelity_Zero.Fidelity_Zero()
#    model.settings = trans.settings
#    model.geometry = trans.geometry
#
#    model.process.compute.lift.inviscid_wings.geometry = trans.geometry
#    model.process.compute.lift.inviscid_wings.initialize()
#
#    print model.process.compute.lift.inviscid_wings

if __name__ == '__main__':
    main()

